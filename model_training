import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import r2_score, accuracy_score # Keep this import if you use it for validation
import joblib
import sys
from pathlib import Path
from datetime import datetime
import numpy as np

# Print versions for reproducibility - these should match your venv
print(f"Python: {sys.version}")
print(f"Pandas: {pd.__version__}")
import sklearn
print(f"Scikit-learn: {sklearn.__version__}")
print(f"Joblib: {joblib.__version__}")
print(f"NumPy: {np.__version__}")

# --- Data Loading & Preprocessing ---
df = pd.read_csv("weatherAUS.csv", parse_dates=["Date"])

required_cols = ["Location", "Date", "MinTemp", "MaxTemp",
                 "Humidity9am", "Pressure9am", "WindSpeed9am", "RainToday"]
df = df[required_cols].dropna(subset=[col for col in required_cols if col != "RainToday"])

df["Year"] = df["Date"].dt.year
df["Month"] = df["Date"].dt.month
df["Day"] = df["Date"].dt.day
df["AvgTemp"] = (df["MinTemp"] + df["MaxTemp"]) / 2

# --- Create models directory ---
models_dir = Path("models")
models_dir.mkdir(parents=True, exist_ok=True)

# --- Model Training Pipelines ---

# 1. Location Encoder
le = LabelEncoder()
df["Location_Encoded"] = le.fit_transform(df["Location"])
joblib.dump(le, models_dir / "loc_encoder_compressed.pkl", compress=('zlib', 3), protocol=4)

# 2. Temperature Regression Model
X_temp = df[["Location_Encoded", "MinTemp", "MaxTemp",
             "Humidity9am", "Pressure9am", "WindSpeed9am", "Year", "Month", "Day"]]
y_temp = df["AvgTemp"]
temp_reg = LinearRegression()
temp_reg.fit(X_temp, y_temp)
joblib.dump(temp_reg, models_dir / "avgtemp_reg_compressed.pkl", compress=('zlib', 5), protocol=4)

# 3. Rain Classifier
rain_df = df.dropna(subset=["RainToday"])
rain_df["RainToday"] = rain_df["RainToday"].map({"Yes": 1, "No": 0})
X_rain = rain_df[["Location_Encoded", "MinTemp", "MaxTemp",
                   "Humidity9am", "Pressure9am", "WindSpeed9am", "Year", "Month", "Day"]]
y_rain = rain_df["RainToday"]
rain_clf = RandomForestClassifier(n_estimators=150, max_depth=12, random_state=42, class_weight='balanced')
rain_clf.fit(X_rain, y_rain)
joblib.dump(rain_clf, models_dir / "rain_today_clf_compressed.pkl", compress=('zlib', 3), protocol=4)

# --- Model Validation ---
y_temp_pred = temp_reg.predict(X_temp)
y_rain_pred = rain_clf.predict(X_rain)

print("\n--- Model Validation (from training script) ---")
print(f"- Temp Reg RÂ² Score: {r2_score(y_temp, y_temp_pred):.3f}")
print(f"- Rain Clf Accuracy: {accuracy_score(y_rain, y_rain_pred):.3f}")

# --- Generate requirements.txt (Crucial for Streamlit Deployment) ---
with open("requirements.txt", "w") as f:
    f.write(f"""# Auto-generated on {pd.Timestamp.now()}
pandas=={pd.__version__}
scikit-learn=={sklearn.__version__}
joblib=={joblib.__version__}
numpy=={np.__version__}
streamlit==1.26.0 # Add Streamlit explicitly for the app
""")
print("\nGenerated requirements.txt:") # This line was missing before!
with open("requirements.txt", "r") as f:
    print(f.read())
